generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  checkIns      CheckIn[]
  friendsOf     Friend[]  @relation("FriendsOfUser")
  friends       Friend[]  @relation("UserFriends")
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model CheckIn {
  id        String    @id @default(cuid())
  userId    String
  startTime DateTime  @default(now())
  endTime   DateTime?
  duration  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  friend    User     @relation("FriendsOfUser", fields: [friendId], references: [id])
  user      User     @relation("UserFriends", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model ShitChat {
  id         String    @id @default(cuid())
  content    String
  type       String
  source     String
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  isCurated  Boolean   @default(false)
}

model ApiUsage {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  count     Int      @default(0)
  lastReset DateTime @default(now())
}
